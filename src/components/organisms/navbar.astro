---
import LogoHeader from "../atoms/logoHeader.astro";
import ButtonDownloadCv from "../atoms/buttonDownloadCv.astro";

// Obtener la ruta actual para saber qué enlace está activo
const currentPath = Astro.url.pathname;

// Definir los estilos base y activos para cada enlace
const baseStyle = "transition-all duration-300 border-b-2 border-transparent";
const links = [
    { href: "/", text: "Inicio", activeColor: "custom-1" },
    { href: "/about", text: "Acerca de mi", activeColor: "custom-2" },
    { href: "/#projects", text: "Proyectos", activeColor: "custom-6" },
    { href: "/contact", text: "Contacto", activeColor: "custom-4" }
];
---

<nav class="relative">
    <div>
        <div class="flex items-center justify-between md:justify-end">
            <!-- Logo visible solo en móvil -->
            <div class="md:hidden">
                <LogoHeader />
            </div>

            <!-- Botón de menú hamburguesa (visible solo en móvil) -->
            <button
                id="menu-toggle"
                class="md:hidden text-white p-2 focus:outline-none relative w-6 h-6 z-10"
                aria-label="Toggle menu"
            >
                <span class="menu-icon absolute inset-0 transition-transform duration-300">
                    <svg
                        class="w-6 h-6"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                        xmlns="http://www.w3.org/2000/svg"
                    >
                        <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d="M4 6h16M4 12h16M4 18h16"
                        ></path>
                    </svg>
                </span>
                <span class="close-icon absolute inset-0 transition-transform duration-300">
                    <svg
                        class="w-6 h-6"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                        xmlns="http://www.w3.org/2000/svg"
                    >
                        <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d="M6 18L18 6M6 6l12 12"
                        ></path>
                    </svg>
                </span>
            </button>
        </div>
    </div>

    <!-- Menú de navegación -->
    <div
        id="nav-menu"
        class="nav-menu fixed md:relative top-0 right-0 w-4/5 md:w-auto h-screen md:h-auto bg-custom-5/20 backdrop-blur-md md:bg-transparent p-8 md:p-0 shadow-lg md:shadow-none flex flex-col md:flex-row items-center justify-start transform translate-x-full md:translate-x-0 transition-transform duration-300 ease-in-out md:flex md:items-center md:gap-10"
    >
        <div class="w-full flex flex-col items-center md:flex-row md:items-center md:gap-10 pt-20 md:pt-0">
            {
                links.map(({ href, text, activeColor }) => (
                    <a
                        href={href}
                        class:list={[
                            baseStyle,
                            `text-white hover:text-${activeColor} hover:border-${activeColor}`,
                            currentPath === href ? `text-${activeColor} border-${activeColor}` : "",
                            "block md:inline-block py-4 md:py-0 font-bold text-xl md:text-base"
                        ]}
                        data-nav-link={href.startsWith('#')}
                    >
                        {text}
                    </a>
                ))
            }

            <!-- Botón de CV visible solo en móvil -->
            <div class="md:hidden mt-8 w-full flex justify-center">
                <ButtonDownloadCv />
            </div>
        </div>
    </div>
</nav>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const menuToggle = document.getElementById('menu-toggle');
        const navMenu = document.getElementById('nav-menu');
        const menuIcon = document.querySelector('.menu-icon');
        const closeIcon = document.querySelector('.close-icon');
        const navLinks = document.querySelectorAll('[data-nav-link]');

        if (!menuToggle || !navMenu || !menuIcon || !closeIcon) return;

        let lastScrollTop = 0;
        const SCROLL_THRESHOLD = 50;
        let isMenuOpen = false;

        function toggleMenu(forceClose = false) {
            if (!navMenu || !menuIcon || !closeIcon || !menuToggle) return;
            
            isMenuOpen = forceClose ? false : !isMenuOpen;
            
            // Toggle menu visibility using transform
            (navMenu as HTMLElement).style.transform = isMenuOpen ? 'translateX(0)' : 'translateX(100%)';
            
            // Toggle icons
            (menuIcon as HTMLElement).style.transform = isMenuOpen ? 'scale(0)' : 'scale(1)';
            (closeIcon as HTMLElement).style.transform = isMenuOpen ? 'scale(1)' : 'scale(0)';
            
            // Toggle aria-expanded
            menuToggle.setAttribute('aria-expanded', isMenuOpen.toString());
        }

        menuToggle.addEventListener('click', () => toggleMenu());

        window.addEventListener('scroll', () => {
            const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
            
            if (scrollTop > lastScrollTop && scrollTop > SCROLL_THRESHOLD) {
                if (isMenuOpen) {
                    toggleMenu(true);
                }
            }
            lastScrollTop = scrollTop;
        });

        // Manejo mejorado de navegación suave
        document.querySelectorAll('a').forEach(link => {
            link.addEventListener('click', (e) => {
                const href = link.getAttribute('href');
                
                // Si es un enlace interno (comienza con # o /#)
                if (href && (href.startsWith('#') || href.startsWith('/#'))) {
                    e.preventDefault();
                    
                    // Extraer el ID del elemento objetivo
                    const targetId = href.replace(/\/?#/, '');
                    const targetElement = document.getElementById(targetId);
                    
                    if (targetElement) {
                        // Cerrar menú en móvil si está abierto
                        if (window.innerWidth < 768 && isMenuOpen) {
                            toggleMenu(true);
                        }
                        
                        // Scroll suave al elemento
                        targetElement.scrollIntoView({
                            behavior: 'smooth',
                            block: 'start'
                        });
                    }
                }
            });
        });

        // Ajustar menú en cambio de tamaño de ventana
        window.addEventListener('resize', () => {
            if (window.innerWidth >= 768) {
                (navMenu as HTMLElement).style.transform = 'translateX(0)';
                (menuIcon as HTMLElement).style.transform = 'scale(1)';
                (closeIcon as HTMLElement).style.transform = 'scale(0)';
                isMenuOpen = false;
            } else if (!isMenuOpen) {
                (navMenu as HTMLElement).style.transform = 'translateX(100%)';
            }
        });
    });
</script>

<style>
    a:focus {
        outline: none;
    }

    /* Estilos del botón de menú */
    .menu-icon, .close-icon {
        transition: transform 0.3s ease;
    }

    .menu-icon {
        transform: scale(1);
    }

    .close-icon {
        transform: scale(0);
    }

    /* Animación del menú */
    .nav-menu {
        transition: transform 0.3s ease-in-out;
    }

    @media (min-width: 768px) {
        .nav-menu {
            transform: translateX(0) !important;
        }
    }
</style>